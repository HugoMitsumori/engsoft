require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ShowsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Show. As you add validations to Show, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {title: "Test show",
    release: Date.new(2112, 12, 12),
    description: "Test"}
  }

  before(:all) do
    @user = User.where(login: "test").first
    if(@user == nil)
      @user = User.create!({
        login: "test",
        email: "test@test.com",
        name: "test",
        birthdate: Date.new(2112, 12, 12),
        password: "testtest"
      })
    end
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ShowsController. Be sure to keep this updated too.
  let(:valid_session) { {user_id: @user.id} }

  describe "GET #index" do
    it "assigns all shows as @shows" do
      show = Show.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:shows)).to eq([show])
    end
  end

  describe "GET #show" do
    it "assigns the requested show as @show" do
      show = Show.create! valid_attributes
      get :show, params: {id: show.to_param}, session: valid_session
      expect(assigns(:show)).to eq(show)
    end
  end

  describe "GET #new" do
    it "assigns a new show as @show" do
      get :new, params: {}, session: valid_session
      expect(assigns(:show)).to be_a_new(Show)
    end
  end

  describe "GET #edit" do
    it "assigns the requested show as @show" do
      show = Show.create! valid_attributes
      get :edit, params: {id: show.to_param}, session: valid_session
      expect(assigns(:show)).to eq(show)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Show" do
        expect {
          post :create, params: {show: valid_attributes}, session: valid_session
        }.to change(Show, :count).by(1)
      end

      it "assigns a newly created show as @show" do
        post :create, params: {show: valid_attributes}, session: valid_session
        expect(assigns(:show)).to be_a(Show)
        expect(assigns(:show)).to be_persisted
      end

      it "redirects to the created show" do
        post :create, params: {show: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Show.last)
      end
    end
  end
end
